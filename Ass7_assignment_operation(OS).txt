
Assignment 7-1

Lex file:


%{
#include "y.tab.h"
extern int yylval;
%}
id [a-zA-Z][a-zA-Z0-9]*
%%
[0-9]+	{
        	return NUMBER; 
        }
{id}    {
			return ID;
		} 
[ \t]	{ 
			("skipped whitespace\n"); 
		}
\n		{ 
			
			return 0;
		}
.		{ 
			
			return yytext[0];
		}
%%


Yacc File:

%{
	#include <stdio.h>
	#include<math.h>
	#include<ctype.h>
	#include <stdlib.h>
	#include<string.h>
	extern char *yytext;
	
	char stack[50][50];
	int top=-1;
	char token[20];
	
	char topt[5];
	char j[5];	
	int i=1;	
%}
%token ID NUMBER 
%right '='
%left '+' '-'
%left '*' '/'
%left UMINUS

%%
 S : ID {
 			strcpy(token,yytext);
 			push();
 		} '=' {
 				strcpy(token,"=");
 				push();
 			}
 		E	{
 				generate_assign();
 		 	}
   ;
  
 E : E '+'  {
 				strcpy(token,"+");
 				push();
 			}
 		T	{
 				generate();
 		 	}
   | E '-'  {
 				strcpy(token,"-");
 				push();
 			}
 		T	{
 				generate();
 		 	}
    |T
 	;
 
 T : T '*'  {
 				strcpy(token,"*");
 				push();
 			}
 		F	{
 				generate();
 		 	}
   | T '/'  {
 				strcpy(token,"/");
 				push();
 			}
 		F	{
 				generate();
 		 	}   
   | F
 	; 
 	
 	 F : '(' E ')' 
 	
   | '-'{
   			strcpy(token,"-");
 			push();
   		}
   	 F  {
   	 		generate_minus();
   	    } %prec UMINUS
   
   | ID {
   			strcpy(token,yytext);
 			push();
   		}
   	 	    
   | NUMBER {
   			strcpy(token,yytext);
 			push();
   		 }
   ;
%%

int main()
{
  printf("Enter The Expression:");
  yyparse();
  printf("\n");
}
void push()
{
	strcpy(stack[++top],token);
}
void generate()
{
	if(i==1)
		printf("\nIntermediate Code:");
	strcpy(topt,"temp");
	sprintf(j,"%d",i);
	strcat(topt,j);
	i++;
	
	printf("\n\n%s= %s %s %s",topt,stack[top-2],stack[top-1],stack[top]);
	top-=2;
	
	strcpy(stack[top],topt);
	
}
void generate_minus()
{
	strcpy(topt,"temp");
	sprintf(j,"%d",i);
	strcat(topt,j);
	i++;
	
	printf("\n\n%s= -%s",topt,stack[top]);
	top-=1;
	
	strcpy(stack[top],topt);
}
void generate_assign()
{
	strcpy(topt,"temp");
	sprintf(j,"%d",i);
	strcat(topt,j);
	i++;	
	printf("\n\n%s= %s",stack[top-2],stack[top]);	
}
int yyerror(char *msg)
{
	return fprintf(stderr,"YACC:%s\n",msg);
}
int yywrap()
{

}

Run:a=(b+c)-(d-e)
